____         _____
|   \       /
|___/ \   / \____   __          __
|      \ /       \ /__\ |/ | / /__\ |/
|       /   _____/ \__  |  |/  \__  |
      _/

-----------------------------------
Server HTTP basato su Python
Copyright (c) 2014 Meneghetti Fabio
-----------------------------------

Introduzione
-----------------------------------
PyServer è un server HTTP/HTTPS leggero, scritto in python cercando di utilizzare
meno moduli esterni possibili

Utilizzo
-----------------------------------
Per utilizzare il server basta eseguire "main.py" con un interprete python
nella cartella dove è presente

Requisiti
-----------------------------------
* Python versione 2.6/2.7
* I moduli socket, time, os, sys, mimetypes, zlib, re
* Il modulo OpenSSL per il server HTTPS

Configurazione
-----------------------------------
In questa versione NON è più necessario modificare il file config.py
La prima variabile nel file 'main.py' indica un file di configurazione.
Sebbene non sia necessario è possibile crearlo e modificare a piacere gli attributi sotto,
rispettando la sintassi conf e le sezioni. Tutto ciò che non viene menzionato o modificato
viene lasciato con il suo valore di default
Nota: Se il modulo OpenSSL non dovesse essere disponibile (Es. su Android)
il server sicuro verrà disabilitato anche se abilitato nella configurazione

Tra parentesi quadre è indicato il valore originale
Se il campo è racchiuso tra parentesi graffe vuol dire che la feature è
in sviluppo e non funzionerà indipendentemente dal settaggio

la variabile cfg è la configurazione cartella relativa al file

Sezione "debug"
level        Imposta il livello di debug
             (D, I, W, E; rispettivamente debug, info, attenzione, errore)
             Un qualunque altro valore (Anche le lettere sopra in minuscolo)
             disabilita il debug
             ["I"]
             
use_colors   Su sistemi unix/linux o comunque terminali
             che supportano lo standard vt100 è possibile colorare
             i tag di debug per distinguerli meglio
             [False]
             
file_append  Se impostato a True aggiunge il debug al file invece che
             sovrascrivere il file stesso
             [False]


Sezione "paths"
debug       E' possibile scrivere il debug anche su file.
            Per disabilitarlo lasciare il campo vuoto
            ["PyDebug.log"]
            
webdisk     La stringa indica un percorso, relativo o assoluto, indicante la radice
            dei file disponibili sul server
            ["webdisk"]
            
folder_cfg  A discapito del nome (mi girava così in quel momento) contiene le configurazioni delle cartelle dell' HD virtuale
            E' un dizionario a due strati (Pagine -> configurazione relativa alla stessa): tuttavia l'unico accessibile
            direttamente in pyml è l'ultimo strato (tramite 'configuration')
            Il file si presenta come un classico conf e questo è il nome che avrà per ogni cartella,
            dove le categorie corrispondono ai file a cui è riferita la configurazione.
            Le categorie funzionano anche come due tipi di regex:
              la prima (shell type) scrivendola semplicemente nelle parentesi quadre e supporta i selettori '*' e '?' (anche multipli) 
                Es: [*.mk?] che seleziona (tra gli altri) tutti i file mkv e tutti i file mka
              la seconda (regex) scrivendo nelle parentesi quadre 're:' seguito dalla regex, SENZA SPAZIH!
                Es: [re:.*\.(bmp|jpe?g|gif|png)] che seleziona (quasi) tutti i comuni file immagine (bmp, jpg, jpeg, gif, png)
            
cache       Qui verranno salvate le copie cache in formato GZip modificato (4 bytes per il secondo di scadenza e il resto GZip)
            ["tmp"]
            
https_key   La chiave privata e il certificato per il server HTTPS
https_cert  Su linux/unix si possono generare con il comando
                openssl genrsa -des3 -out chiave_privata_server.key 1024
                openssl req -new -key chiave_privata_server.key -out chiave_privata_server.cert
            Verranno generati i file chiave_privata_server.key e
            chiave_privata_server.cert con algoritmo des3
            [""], [""]


Sezione "buffers"

post_undefined_length  Quando il client esegue una richiesta POST senza il campo Content-Length nell'header
                       questa è la dimensione di ricezione del buffer
                       [128]
                       
send_buffer            Quando i file vengono inviati al client questa è la dimensione del buffer
                       Non deve mai essere superiore alla Window Size TCP (Generalmente 65536 Bytes)
                       [2048]
                       
tcp_receive_buffer     Questa è la dimensione di ricezione dei dati nelle richieste POST
                       Non deve mai essere superiore alla Window Size TCP (Generalmente 65536 Bytes)
                       [32768]


Sezione "cache"

use                   Abilita la cache. Non può essere bypassato dalla cfg
                      [True]
                      
on_pages              Abilita il caching delle pagine statiche. Può essere bypassata. Valida solo su file .html e .htm
                      [True]
                      
pages_validity        Validità della cache delle pagine dalla creazione (o aggiornamento) espresso in secondi. Può essere bypassato dalla cfg
                      [300]
                      
on_files              Abilita il caching dei file. Può essere bypassata. Non valida su pagine statiche e dinamiche
                      [True]
                      
files_validity        Validità della cache dei file dalla creazione (o aggiornamento) espresso in secondi. Può essere bypassato dalla cfg
                      [300]
                      
on_large_files        Abilita il caching dei file grandi. Può essere bypassata. Non valida su pagine statiche e dinamiche
                      [True]
                      
large_files_low_size  Dimensione sopra la quale un file viene considerato grande. Non può essere bypassata
                      [1024*1024*4 alias 4 MiB]
                      
lfiles_validity       Validità della cache dei file dalla creazione (o aggiornamento) espresso in secondi. Può essere bypassato dalla cfg
                      [600]


Sezione "misc"
index_search_order    La lista indica l'ordine di ricerca del file di index
                      quando un client richiede una pagina tipo http(s)://indirizzoserver/ o
                      http(s)://indirizzoserver/cartelle/altre_cartelle/
                      Se nessun file viene trovato viene inviato un errore 404
                      [[".pyml", ".pyhtml", ".html", ".htm"]] (è una lista!)
                      
server_error_template La stringa indica un file da cui verrà estratto il template di errore del client/server
                      Il file è un html standard, dove '%errnum' e '%errdesc' vengono rispettivamente sostituite
                      con il codice errore HTTP e una breve stringa di descrizione
                      
{chroot_after_load}   Se impostato a True, una volta completato il caricamento dei server il programma
                      esegue un chroot su WEBDISK_PATH in modo da aumentare la sicurezza.
                      Richiede i privilegi di amministratore/root
                      Linux/Unix: Cambia anche i permessi dell'utente a daemon dopo
                                  chroot e dopo aver modificato
                                  ad a+rwx i permessi di paths.webdisk
                                  Prima della chiusura del programma vengono reimpostati i permessi
                      [False]


Sezione "http"
use      Abilita il server HTTP
         [True]

port     La porta per il server HTTP. Per accedere al server usare http://indirizzoserver:porta/
         Se la porta è la 80 non serve aggiungere :porta all'URL, ma richiede i
         privilegi di root/amministratore per l'esecuzione del server
         [8080]
         
backlog  La coda del server HTTP. Un valore grande diminuisce il rischio
         di DoS (in particolare SYN Flood)
         a scapito delle prestazioni di rete
         [256]


Sezione "https":
use      Se impostato a True viene attivato anche il server HTTPS.
         Viene ignorata se il modulo OpenSSL non è presente.
         Sono inoltre necessari una chiave privata e un certificato
         (Vedi paths.https_key e paths.https_cert)
         [False]
         
port     La porta per il server HTTPS.
         Per accedere al server usare https://indirizzoserver:porta/
         Se la porta è la 443 non serve aggiungere :porta all'URL, ma richiede i
         privilegi di root/amministratore per l'esecuzione del server.
         [8443]
         
backlog  La coda del server HTTP. Un valore grande diminuisce il rischio
         di DoS (in particolare SYN Flood)
         a scapito delle prestazioni di rete
         [128]



Python Markup Language
-----------------------------------
Il server mette a disposizione un linguaggio ibrido tra HTML e Python,
con estensione .pyhtml o .pyml
eseguito lato server e inviato poi al client

Per inserire codice python in un pyml lo si deve includere nei tag <?py e ?>
    <?py
        print "ciao <br />"
        print "Mondo!<br />"
    ?>
Si può inserire codice inline mettendo i tag sulla stessa linea,
ma possono contenere una sola istruzione (o più se separate da ";")
    <title><?py print "Titolo dinamico!" ?></title>

Tutte le variabili create in un blocco sono disponibili in tutti quelli successivi

Un po di variabili servono ad integrare python con il server:
'document' è una classe che contiene:
    url: l'url grezzo
    args: lista argomenti passati nell'url (file?arg1=val1&arg2=val2...)
    header: contiene l'header di richiesta
    request: il tipo di richiesta (GET o POST)
    post: Se la richiesta è post, contiene tutti gli argomenti passati dal browser, separati come l'url
    rawpost: contiene i dati grezzi ricevuti dal client durante il POST,
             utili per utilizzare XMLHttpRequest o inviare file dal client (anche se conviene bypassare il post
                                                                            e riceverlo manualmente in questo caso)

'stream' è una classe che contiene:
    socket: il socket collegato al client
    header: l'header di risposta
    metodi di compressione, modificabili con .setCompressMode(tipo, qualità)
    sostituzione di '\n' in '<br />', abilitato di default, modificabile con .set_n_as_br(modo)
    streaming live, disabilitato di default, modificabile con .setWait(modo)
    flush coda, con .flush()
    

Gli argomenti e i dati POST sono automaticamente convertiti dal formato application/x-www-form-urlencoding ad ASCII
o lasciati così come sono se vengono rilevati come binari

Inoltre 'args' e 'post' sono dizionari particolari: infatti per accedere al valore di 'argomentò nell'url

    http(s)://indirizzo:porta/percorso/file?argomento=ciao

si può fare usandolo come chiave: document.args["argomento"]
oppure usandolo come valore:      document.args.argomento

L'header di risposta è modificabile in stile quasi PHP (Forse è meglio questo modo =)
    stream.header(campo)         ritorna il valore di 'campo'
    stream.header(campo, valore) setta campo a valore e ritorna valore

I valori numerici e password NON SONO CONVERTITI AUTOMATICAMENTE!

Folder Cfg
-----------------------------------
Il server mette a disposizione la possibilità di creare un file per cartella in grado di modificare il comportamento
di uno o più file. DEVONO essere chiamati come config.paths.folder_cfg (predefinito con "." all'inizio, per nasconderlo).
La struttura del file è il solito conf, dove le categorie sono i nomi dei file (possono essere anche shell regex o normali regex anteponedo 're:')
I campi sono:
    receive_post              Ricevi il post in modo automatico. Serve per pagine dinamiche personalizzate [True]
    force_cache_state         Forza l'utilizzo o meno della cache. 1 forza l'uso, -1 forza il non uso
                              e 0 lascia decidere alla configurazione server [0]
    force_compression         Forza un metodo di compressione. Sono supportati solo identity, deflate e gzip.
                              Una stringa vuota lascia la decisione automatica [""]
    force_compression_quality Forza la qualità delle stringhe deflate, da 0 (Niente compressione, velocità alta)
                              a 9(Compressione massima, velocità bassa) [5]
    force_cache_validity      Forza la validità della cache a n secondi. 0 lascia l'impostazione automatica [0]

Minishell
-----------------------------------
Il server mette a disposizione una minishell contenenti alcuni comandi
per il debug sia del server, sia delle pagine dinamiche (/ separa le alternative):
    clients/c       Visualizza lo stato dei client attualmente collegati
    disconn/d       Disconnetti tutti i client troncando le connessioni correnti
    http/https      Seleziona il server HTTP/S. I comandi precedenti saranno validi solo su questo server
    q/quit/exit     Interrompi il server. Dato l'utilizzo di SO_REUSEADDR sul socket del server è possibile
                    reinizializzare il server subito sulla stessa porta, invece che aspettare il TCP Timeout
